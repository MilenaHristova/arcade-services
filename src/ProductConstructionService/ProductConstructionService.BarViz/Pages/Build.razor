@page "/channel-{ChannelId:int}/{RepoEscaped}/build-{BuildId}"
@using ProductConstructionService.Client
@using ProductConstructionService.Client.Models;
@using ProductConstructionService.BarViz.Components;
@inject IProductConstructionServiceApi PcsApi

<FluentStack VerticalGap="20" Orientation="Orientation.Vertical">
    <h3>Build</h3>

    @if (_build == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h1>@_build.AzureDevOpsRepository</h1>

        <Subscriptions Repository="@Repo" ChannelId="@ChannelId"/>

        <Assets BuildId="@_build.Id" />
    }

</FluentStack>

@code {
    [Parameter]
    public int ChannelId { get; set; }

    [Parameter]
    public string? RepoEscaped { get; set; }

    [Parameter]
    public string? BuildId { get; set; }

    private string? Repo { get; set; }

    private ProductConstructionService.Client.Models.Build? _build;

    protected override async Task OnParametersSetAsync()
    {
        Repo = Uri.UnescapeDataString(RepoEscaped!);

        if (BuildId == "latest")
        {
            _build = (await PcsApi.Builds.GetLatestAsync(repository: Repo, channelId: ChannelId));
        }
        else
        {
            _build = await PcsApi.Builds.GetBuildAsync(int.Parse(BuildId!));
        }
    }
}
